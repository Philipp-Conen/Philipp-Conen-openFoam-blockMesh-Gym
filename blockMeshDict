/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
	// Convert
	convertToMeters 1;

	// Variables
	gymWidth 50;
	gymHeight 10;
	gymDeeps 30;
	
	doorWidth 1;
	doorHeight 2;
	
	x0 0;
	x1 #calc " ($gymWidth - $doorWidth) / 2 ";
	x2 #calc " $x1 + $doorWidth ";
	x3 #calc " $gymWidth ";
	
	y0 0;
	y1 #calc " $doorHeight ";
	y2 #calc " $gymHeight ";
	
	z0 0;
	z1 #calc " 2 * $dx + $doorWidth ";
	z2 #calc " 2 * $dx + $doorWidth ";
	z3 #calc " $gymDeeps ";
	
	//---------------------------------
	
	scaleX 10;
	scaleY 10;
	scaleZ 10;
	
	//---------------------------------
	
	cellsX01 #calc " ($x1 - $x0) * scaleX ";
	cellsX12 #calc " ($x2 - $x1) * scaleX ";
	cellsX23 #calc " ($x3 - $x2) * scaleX ";
	
	cellsY01 #calc " ($y1 - $y0) * scaleY ";
	cellsY12 #calc " ($y2 - $y1) * scaleY ";
	
	cellsZ01 #calc " ($z1 - $z0) * scaleZ ";
	cellsZ12 #calc " ($z2 - $z1) * scaleZ ";
	cellsZ13 #calc " ($z3 - $z2) * scaleZ "; 
	
    vertices
    (
        ( $x0   $y0   	$z0)	// vertex number 0
        ( $x1   $y0   	$z0)	// vertex number 1
        ( $x2   $y0  	$z0)	// vertex number 2
        ( $x3   $y0  	$z0)	// vertex number 3
        ( $x0   $y1   	$z0)	// vertex number 4
        ( $x1   $y1   	$z0)	// vertex number 5
        ( $x2   $y1  	$z0)	// vertex number 6
        ( $x3   $y1  	$z0)	// vertex number 7
        ( $x0   $y2   	$z0)	// vertex number 8
        ( $x1   $y2   	$z0)	// vertex number 9
        ( $x2   $y2  	$z0)	// vertex number 10        
        ( $x3   $y2  	$z0)	// vertex number 11 
          
        ( $x0   $y0   	$z1)	// vertex number 12
        ( $x1   $y0   	$z1)	// vertex number 13
        ( $x2   $y0  	$z1)	// vertex number 14
        ( $x3   $y0  	$z1)	// vertex number 15
        ( $x0   $y1   	$z1)	// vertex number 16
        ( $x1   $y1   	$z1)	// vertex number 17
        ( $x2   $y1  	$z1)	// vertex number 18
        ( $x3   $y1  	$z1)	// vertex number 19
        ( $x0   $y2   	$z1)	// vertex number 20        
        ( $x1   $y2  	$z1)	// vertex number 21   
        ( $x2   $y2   	$z1)	// vertex number 22
        ( $x3   $y2   	$z1)	// vertex number 23
        
        ( $x0   $y0  	$z2)	// vertex number 24
        ( $x1   $y0  	$z2)	// vertex number 25
        ( $x2   $y0   	$z2)	// vertex number 26
        ( $x3   $y0   	$z2)	// vertex number 27
        ( $x0   $y1  	$z2)	// vertex number 28
        ( $x1   $y1  	$z2)	// vertex number 29
        ( $x2   $y1   	$z2)	// vertex number 30        
        ( $x3   $y1  	$z2)	// vertex number 31   
        ( $x0   $y2   	$z2)	// vertex number 32
        ( $x1   $y2   	$z2)	// vertex number 33
        ( $x2   $y2  	$z2)	// vertex number 34
        ( $x3   $y2  	$z2)	// vertex number 35
        
        ( $x0   $y0   	$z3)	// vertex number 36
        ( $x1   $y0   	$z3)	// vertex number 37
        ( $x2   $y0  	$z3)	// vertex number 38
        ( $x3   $y0  	$z3)	// vertex number 39
        ( $x0   $y1   	$z3)	// vertex number 40        
        ( $x1   $y1  	$z3)	// vertex number 41   
        ( $x2   $y1   	$z3)	// vertex number 42
        ( $x3   $y1   	$z3)	// vertex number 43
        ( $x0   $y2  	$z3)	// vertex number 44
        ( $x1   $y2  	$z3)	// vertex number 45
        ( $x2   $y2   	$z3)	// vertex number 46
        ( $x3   $y2   	$z3)	// vertex number 47
    );

    blocks
    (
    	// Block 0
        hex ( 0 1 5 4 12 13 17 16 )    // vertex numbers
        ( cellsX01 cellsY01 cellsZ01 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 1
        hex ( 1 2 6 5 13 14 18 17 )    // vertex numbers
        ( cellsX12 cellsY01 cellsZ01 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 2
        hex ( 2 3 7 6 14 15 19 18 )    // vertex numbers
        ( cellsX23 cellsY01 cellsZ01 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 3
        hex ( 4 5 9 8 16 17 21 20 )    // vertex numbers
        ( cellsX01 cellsY12 cellsZ01 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 4
        hex ( 5 6 10 9 17 18 22 21 )    // vertex numbers
        ( cellsX12 cellsY12 cellsZ01 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 5
        hex ( 6 7 11 10 18 19 23 22 )    // vertex numbers
        ( cellsX23 cellsY12 cellsZ01 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
        
        //---------
        
    	// Block 6
        hex ( 12 13 17 16 24 25 29 28 )    // vertex numbers
        ( cellsX01 cellsY01 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 7
        hex ( 13 14 18 17 25 26 30 29 )    // vertex numbers
        ( cellsX12 cellsY01 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 8
        hex ( 14 15 19 18 26 27 31 30 )    // vertex numbers
        ( cellsX23 cellsY01 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 9
        hex ( 16 17 21 20 28 29 33 32 )    // vertex numbers
        ( cellsX01 cellsY12 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 10
        hex ( 17 18 22 21 29 30 34 33 )    // vertex numbers
        ( cellsX12 cellsY12 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 11
        hex ( 18 19 23 22 30 31 35 34 )    // vertex numbers
        ( cellsX23 cellsY12 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
        
        //---------
        
    	// Block 12
        hex ( 24 25 29 28 36 37 41 40 )    // vertex numbers
        ( cellsX01 cellsY01 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 13
        hex ( 25 26 30 29 37 28 42 41 )    // vertex numbers
        ( cellsX12 cellsY01 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 14
        hex ( 26 27 31 30 38 39 43 42 )    // vertex numbers
        ( cellsX23 cellsY01 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 15
        hex ( 28 29 33 32 40 41 45 44 )    // vertex numbers
        ( cellsX01 cellsY12 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 16
        hex ( 29 30 34 33 41 42 46 45 )    // vertex numbers
        ( cellsX12 cellsY12 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    	// Block 17
        hex ( 30 31 35 34 42 43 47 46 )    // vertex numbers
        ( cellsX23 cellsY12 cellsZ12 )	// numbers of cells in each direction
        simpleGrading ( 1 1 1 )    // cell expansion ratios
    );

    boundary
    (
        leftDoor 
        {
            type patch;
            faces
            (
				( 28 16 12 24 )
            );
        }
        midDoor
        {
            type patch;
            faces
            (
				( 6 2 1 5 )
            );
        }
        rightDoor
        {
            type patch;
            faces
            (
				( 31 27 15 19 )
            );
        }
        //----------------------
        front 
        {
            type patch;
            faces
            (
				( 5 1 0 4 )
				( 7 3 2 6 )
				( 9 5 4 8 )
				( 10 6 5 9 )
				( 11 7 6 10 )
            );
        }
        back 
        {
            type patch;
            faces
            (
				( 41 40 36 37 )
				( 42 41 37 38 )
				( 43 42 38 39 )
				( 45 44 40 41 )
				( 46 45 41 42 )
				( 47 46 42 43 )
            );
        }
        left 
        {
            type patch;
            faces
            (
				( 16 4 0 12 )
				( 40 28 12 24 )
				( 44 32 28 40 )
				( 32 20 16 28 )
				( 20 8 4 16 )
            );
        }
        right 
        {
            type patch;
            faces
            (
				( 19 15 3 7 )
				( 43 39 27 31 )
				( 47 43 31 35 )
				( 35 31 19 23 )
				( 23 19 7 11 )
            );
        }
        top 
        {
            type patch;
            faces
            (
				( 21 9 8 20 )
				( 33 21 20 32 )
				( 45 33 32 44 )
				( 22 10 9 21 )
				( 34 22 21 33 )
				( 46 34 33 45 )
				( 23 11 10 22 )
				( 35 23 22 34 )
				( 47 35 34 46 )
            );
        }
        bot 
        {
            type patch;
            faces
            (
				( 13 12 0 1 )
				( 25 24 12 13 )
				( 37 36 24 25 )
				( 14 13 1 2 )
				( 26 25 13 14 )
				( 38 37 25 26 )
				( 15 14 2 3 )
				( 27 26 14 15 )
				( 39 38 26 27 )
            );
        }
    );

mergePatchPairs
(
);

// ************************************************************************* //
